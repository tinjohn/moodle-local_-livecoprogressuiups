{"version":3,"file":"dynprogress.min.js","sources":["../src/dynprogress.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Dynamic Progressbar and more\n *\n * @module     local_livecoprogressuiups/dynprogress\n * @copyright  2023 Tina John <tina.john@th-luebeck.de>\n * @copyright  Institut fuer interaktive Systeme der TH LÃ¼beck\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {init as listener} from './listener';\n\nimport {get_theme_learnr_Progressbar_InnerHTML} from './local/dynprogress/repository';\nimport {get_block_Game_InnerHTML} from './local/dynprogress/repository';\nimport {get_H5P_ActivityInformation_InnerHTML} from './local/dynprogress/repository';\n\nimport selectors from 'local_livecoprogressuiups/local/dynprogress/selectors';\n\n/**\n * Gets the course id from body tag.\n *\n * @returns courseid or false.\n */\nfunction getCourseIdFromBody() {\n    const bodyTag = document.getElementsByTagName('body')[0];\n    const attributeNames = bodyTag.getAttributeNames();\n    var courseid;\n    attributeNames.forEach(attribute => {\n        const attributeValue = bodyTag.getAttribute(attribute);\n        const regex = /course-(\\d+)/;\n        const matches = attributeValue.match(regex);\n        if (matches) {\n            const courseNumber = matches[0];\n            courseid = courseNumber.split('-')[1];\n            window.console.log(\"lcprogessuiups-- Coursenumber------\", courseid);\n            return(courseid);\n        }\n    });\n    if(courseid) {\n        return(courseid);\n    } else {\n        return false;\n    }\n}\n\n/**\n * Replaces the whole DOM element looked for by the given selectorclass starting from DOMs 'element'.\n * It is not as smooth as just changing a parameter in DOM elements like the width of a progressbar,\n * but the DOM element is correct and overall up-to-date.\n *\n * @param {*} selectorclass\n * @param {*} element by default document\n */\nfunction replaceDOM(selectorclass, element = document) {\n    // The callback function onResolve holds the promise return value.\n    // That way the additional selectorclass argument mandatory for replaceDOM and the promise value are accessible.\n    return function onResolve(innerHTML) {\n        const elementToReplace = element.getElementsByClassName(selectorclass)[0];\n        if(elementToReplace) {\n            window.console.log(\"---replaceDOM--\", selectorclass);\n            // Creates an additional div but the parent node might have siblings - just to be safe.\n            const newElement = document.createElement('div');\n            newElement.innerHTML = innerHTML;\n            const parentElement = elementToReplace.parentNode;\n            parentElement.replaceChild(newElement, elementToReplace);\n        }\n    };\n  }\n\n\n/**\n * Takes a function that returns a string, that must contain an innerHTML attribute,\n * that contains a string of an innerHTML.\n * The function is async called due to the fact that the function might be a webservice.\n *\n * @param {*} getinnerhtmlfunc\n * @param {*} course_id\n * @param {*} options\n * @returns Promise with innerHTML string\n */\nasync function promise_get_InnerHTML(getinnerhtmlfunc, course_id, options = {}) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let response;\n        if (options.cmid) {\n            response = await getinnerhtmlfunc(course_id, options.cmid);\n        } else {\n            response = await getinnerhtmlfunc(course_id);\n        }\n        if (response && response.innerHTML) {\n          resolve(response.innerHTML);\n        } else {\n          reject(response);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n}\n\n/**\n * Puts an error message to console.\n * @param {*} err\n */\nfunction onError(err) {\n    window.console.log(\"--ERROR: \", err);\n}\n\n\n/**\n * Gets the innerHTML from the given (service) function (servicefunc).\n * Replaces the DOM element based on the selector given.\n * @param {*} course_id\n * @param {*} servicefunc\n * @param {*} selector\n */\nexport const letthemagicbedone = (course_id,servicefunc,selector) => {\n        promise_get_InnerHTML(servicefunc,course_id)\n            .then(replaceDOM(selector))\n            .catch(onError);\n};\n\n\n/**\n * Function extracts cmid from the given DOM elements that holds the information.\n *\n * @param {*} liidelement\n * @returns\n */\nconst getCmid = (liidelement) => {\n    var courseid;\n    const attributeValue = liidelement.getAttribute('id');\n    const regex = /module-(\\d+)/;\n        const matches = attributeValue.match(regex);\n        if (matches) {\n            const courseNumber = matches[0];\n            courseid = courseNumber.split('-')[1];\n            window.console.log(\"lcprogessuiups-- cmid------\", courseid); // Output: module-341\n            return(courseid);\n        }\n  };\n\n/**\n * The way with more effort for h5p activity information.\n * Analyses the event inforamtion.\n * Gets the innerHTML from the given service function (get_H5P_ActivityInformation_InnerHTML).\n * Modfies the the DOM based on the neareast list element\n * and looks for the selector selectors.activityinfo.body within the list element.\n *\n * @param {*} course_id\n * @param {*} event\n */\nconst modify_Activityinformation = (course_id,event) => {\n    window.console.log('lcprogessuiups----themagic_Activityinformation--event',event);\n    if (event && event.detail) {\n        if(event.detail.completionType && event.detail.completionType == 'H5Pscored') {\n            if(event.detail.framedin) {\n                const eventtarget = event.detail.framedin;\n                window.console.log('lcprogessuiups-- eventtarget',eventtarget);\n                // var parentElement = document.querySelector('div[data-region=\"completion-info\"]\n                // [id=\"childElementID\"]');\n                var element = eventtarget.closest('li > div');\n                const cmid = getCmid(eventtarget.closest('li'));\n                promise_get_InnerHTML(get_H5P_ActivityInformation_InnerHTML, course_id, { cmid: cmid })\n                    .then(modifyDOM(selectors.activityinfo.qselector,element))\n                    .catch(onError);\n            } else {\n                window.console.log(\"lcprogessuiups-- no DOM for ActivityInformation in event\");\n            }\n        } else {\n            window.console.log(\"lcprogessuiups-- no H5Pscored completionType in event\");\n        }\n    }\n    return true;\n};\n\n/**\n * Modifies the whole DOM elements innerHTML looked for by the given selectorq\n * and the element to start from.\n *\n * @param {*} selectorq\n * @param {*} element\n */\nfunction modifyDOM(selectorq,element = document) {\n    return function onResolve(innerHTML) {\n        window.console.log(\"---modifyDOM--\", selectorq);\n        var selelement = element.querySelector(selectorq);\n        selelement.innerHTML = innerHTML;\n    };\n}\n\n/*\n* This is the real dynprogress that calls all available UI updates.\n*/\nexport const init = () => {\n    const prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    const course_id = getCourseIdFromBody();\n    if(prbar && course_id) {\n        // Add listener that dispatch cmcompleted events.\n        window.console.log('lcprogessuiups-- livecoprogressuiups----load listener');\n        listener();\n    } else {\n        window.console.log('lcprogessuiups-- livecoprogressuiups----no listeners loaded due to missing prbar');\n    }\n\n    window.addEventListener('load', function () {\n        // Add an event listener to handle the cmcompleted - send from the local_livecoprogressuiups/listener.\n        document.addEventListener('cmcompleted', function(event) {\n            window.console.log('lcprogessuiups-- cmcompleted----Custom event triggered:', event.detail.message);\n            // Implement wait 300 ms to give some time to the core events dealing with the completion.\n             setTimeout(function() {\n                // The theme_learnr_progressbar.\n                letthemagicbedone(course_id,get_theme_learnr_Progressbar_InnerHTML,selectors.progressbar.class);\n                // The H5P completion section. Needs some more arguments to do the magic.\n                modify_Activityinformation(course_id,event);\n                // The block_game.\n                letthemagicbedone(course_id,get_block_Game_InnerHTML,selectors.game.class);\n            }, 300);\n        });\n    });\n};"],"names":["promise_get_InnerHTML","getinnerhtmlfunc","course_id","options","Promise","async","resolve","reject","response","cmid","innerHTML","error","onError","err","window","console","log","letthemagicbedone","servicefunc","selector","then","selectorclass","element","document","elementToReplace","getElementsByClassName","newElement","createElement","parentNode","replaceChild","replaceDOM","catch","modify_Activityinformation","event","detail","completionType","framedin","eventtarget","closest","liidelement","courseid","matches","getAttribute","match","split","getCmid","get_H5P_ActivityInformation_InnerHTML","selectorq","querySelector","modifyDOM","selectors","activityinfo","qselector","prbar","bodyTag","getElementsByTagName","getAttributeNames","forEach","attribute","courseNumber","getCourseIdFromBody","addEventListener","message","setTimeout","get_theme_learnr_Progressbar_InnerHTML","progressbar","class","get_block_Game_InnerHTML","game"],"mappings":";;;;;;;;oBA8FeA,sBAAsBC,iBAAkBC,eAAWC,+DAAU,UACjE,IAAIC,SAAQC,MAAOC,QAASC,kBAE3BC,SAEAA,SADAL,QAAQM,WACSR,iBAAiBC,UAAWC,QAAQM,YAEpCR,iBAAiBC,WAElCM,UAAYA,SAASE,UACvBJ,QAAQE,SAASE,WAEjBH,OAAOC,UAET,MAAOG,OACPJ,OAAOI,oBASNC,QAAQC,KACbC,OAAOC,QAAQC,IAAI,YAAaH,iLAWvBI,kBAAoB,CAACf,UAAUgB,YAAYC,YAChDnB,sBAAsBkB,YAAYhB,WAC7BkB,cAjEOC,mBAAeC,+DAAUC,gBAGlC,SAAmBb,iBAChBc,iBAAmBF,QAAQG,uBAAuBJ,eAAe,MACpEG,iBAAkB,CACjBV,OAAOC,QAAQC,IAAI,kBAAmBK,qBAEhCK,WAAaH,SAASI,cAAc,OAC1CD,WAAWhB,UAAYA,UACDc,iBAAiBI,WACzBC,aAAaH,WAAYF,oBAsDjCM,CAAWX,WAChBY,MAAMnB,6DAiCboB,2BAA6B,CAAC9B,UAAU+B,YAC1CnB,OAAOC,QAAQC,IAAI,wDAAwDiB,OACvEA,OAASA,MAAMC,UACZD,MAAMC,OAAOC,gBAAiD,aAA/BF,MAAMC,OAAOC,kBACxCF,MAAMC,OAAOE,SAAU,OAChBC,YAAcJ,MAAMC,OAAOE,SACjCtB,OAAOC,QAAQC,IAAI,+BAA+BqB,iBAG9Cf,QAAUe,YAAYC,QAAQ,kBAC5B7B,KAjCL8B,CAAAA,kBACTC,eAGMC,QAFaF,YAAYG,aAAa,MAEbC,MADrB,mBAENF,eAEAD,SADqBC,QAAQ,GACLG,MAAM,KAAK,GACnC9B,OAAOC,QAAQC,IAAI,8BAA+BwB,UAC3CA,UAwBUK,CAAQR,YAAYC,QAAQ,OACzCtC,sBAAsB8C,kDAAuC5C,UAAW,CAAEO,KAAMA,OAC3EW,cAmBF2B,eAAUzB,+DAAUC,gBAC5B,SAAmBb,WACtBI,OAAOC,QAAQC,IAAI,iBAAkB+B,WACpBzB,QAAQ0B,cAAcD,WAC5BrC,UAAYA,WAvBLuC,CAAUC,mBAAUC,aAAaC,UAAU9B,UAChDS,MAAMnB,cAEXE,OAAOC,QAAQC,IAAI,iEAGvBF,OAAOC,QAAQC,IAAI,gEAGpB,iBAqBS,WACVqC,MAAQ9B,SAASE,uBAAuB,kCAAkC,GAC1EvB,2BA5KAoD,QAAU/B,SAASgC,qBAAqB,QAAQ,OAElDf,gBADmBc,QAAQE,oBAEhBC,SAAQC,kBAGbjB,QAFiBa,QAAQZ,aAAagB,WAEbf,MADjB,mBAEVF,QAAS,OACHkB,aAAelB,QAAQ,UAC7BD,SAAWmB,aAAaf,MAAM,KAAK,GACnC9B,OAAOC,QAAQC,IAAI,sCAAuCwB,UACnDA,aAGZA,WAGQ,EA2JOoB,GACfP,OAASnD,WAERY,OAAOC,QAAQC,IAAI,+EAGnBF,OAAOC,QAAQC,IAAI,oFAGvBF,OAAO+C,iBAAiB,QAAQ,WAE5BtC,SAASsC,iBAAiB,eAAe,SAAS5B,OAC9CnB,OAAOC,QAAQC,IAAI,0DAA2DiB,MAAMC,OAAO4B,SAE1FC,YAAW,WAER9C,kBAAkBf,UAAU8D,mDAAuCd,mBAAUe,YAAYC,OAEzFlC,2BAA2B9B,UAAU+B,OAErChB,kBAAkBf,UAAUiE,qCAAyBjB,mBAAUkB,KAAKF,SACrE"}