{"version":3,"file":"dynprogress.min.js","sources":["../src/dynprogress.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Dynamic Progressbar and more\n *\n * @module     local_livecoprogressuiups/dynprogress\n * @copyright  2023 Tina John <tina.john@th-luebeck.de>\n * @copyright  Institut fuer interaktive Systeme der TH LÃ¼beck\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { init as listener } from './listener';\n\nimport { get_theme_learnr_Progressbar_InnerHTML } from './local/dynprogress/repository';\nimport { get_block_Game_InnerHTML } from './local/dynprogress/repository';\nimport { get_H5P_ActivityInformation_InnerHTML } from './local/dynprogress/repository';\nimport { get_customcert_Activity_InnerHTML } from './local/dynprogress/repository';\n\nimport selectors from 'local_livecoprogressuiups/local/dynprogress/selectors';\n\n/**\n * Gets the course id from body tag.\n *\n * @returns courseid or false.\n */\nfunction getCourseIdFromBody() {\n    const bodyTag = document.getElementsByTagName('body')[0];\n    const attributeNames = bodyTag.getAttributeNames();\n    var courseid;\n    attributeNames.forEach(attribute => {\n        const attributeValue = bodyTag.getAttribute(attribute);\n        const regex = /course-(\\d+)/;\n        const matches = attributeValue.match(regex);\n        if (matches) {\n            const courseNumber = matches[0];\n            courseid = courseNumber.split('-')[1];\n            return (courseid);\n        }\n    });\n    if (courseid) {\n        return (courseid);\n    } else {\n        return false;\n    }\n}\n\n/**\n * Replaces the whole DOM element looked for by the given selectorclass starting from DOMs 'element'.\n * It is not as smooth as just changing a parameter in DOM elements like the width of a progressbar,\n * but the DOM element is correct and overall up-to-date.\n *\n * @param {*} selectorclass\n * @param {*} element by default document\n */\nfunction replaceDOM(selectorclass, element = document) {\n    return async function onResolve(innerHTML) {\n        const elementToReplace = element.getElementsByClassName(selectorclass)[0];\n        if (elementToReplace) {\n            // window.console.log(\"---replaceDOM--\", selectorclass);\n            const newElement = document.createElement('div');\n            newElement.innerHTML = innerHTML;\n            const parentElement = elementToReplace.parentNode;\n            parentElement.replaceChild(newElement, elementToReplace);\n        }\n    };\n}\n\n/**\n* Modifies the whole DOM elements innerHTML looked for by the given selectorq\n* and the element to start from.\n*\n* @param {*} selectorq\n* @param {*} element\n*/\nfunction modifyDOM(selectorq, element = document) {\n    return async function onResolve(innerHTML) {\n        // window.console.log(\"---modifyDOM--\", selectorq);\n        var selelement = element.querySelector(selectorq);\n        selelement.innerHTML = innerHTML;\n    };\n}\n\n\n/**\n * Takes a function that returns a string, that must contain an innerHTML attribute,\n * that contains a string of an innerHTML.\n * The function is async called due to the fact that the function might be a webservice.\n *\n * @param {*} getinnerhtmlfunc\n * @param {*} course_id\n * @param {*} options\n * @returns innerHTML string\n */\nasync function get_InnerHTML(getinnerhtmlfunc, course_id, options = {}) {\n    try {\n        let response;\n        if (options.cmid) {\n            response = await getinnerhtmlfunc(course_id, options.cmid);\n            window.console.log(response);\n        } else {\n            response = await getinnerhtmlfunc(course_id);\n        }\n        if (response && response.innerHTML) {\n            return response.innerHTML;\n        } else {\n            var errMsg = `in Webservice - no response.innerHTML found.`;\n            throw errMsg;\n        }\n    } catch (error) {\n        var errMsg = `in Webservice: - servicefunc: ${getinnerhtmlfunc}, \n        error - get_InnerHTML: ${error}, coursid: ${course_id} , ${options.cmid}`;\n        throw errMsg;\n    }\n}\n\n/**\n * Puts an error message to console.\n * @param {*} err\n */\nfunction onError(err) {\n    window.console.log(\"--ERROR \", err);\n}\n\n/**\n * Gets the innerHTML from the given (service) function (servicefunc).\n * Replaces the DOM element based on the selector given.\n * @param {*} course_id\n * @param {*} servicefunc\n * @param {*} selector\n */\nexport const letthemagicbedone = async (course_id, servicefunc, selector) => {\n    try {\n        const innerHTML = await get_InnerHTML(servicefunc, course_id);\n        window.console.log(servicefunc + \" \" + innerHTML);\n        await replaceDOM(selector)(innerHTML);\n    } catch (error) {\n        const errMsg = `Something went wrong rewriting a DOM Element - servicefunc: ${servicefunc}, error: ${error}`;\n        onError(errMsg);\n    }\n};\n\n/**\n * Function extracts cmid from the given DOM elements that holds the information.\n *\n * @param {*} liidelement\n * @returns\n */\nconst getCmid = (liidelement) => {\n    var courseid;\n    const attributeValue = liidelement.getAttribute('id');\n    const regex = /module-(\\d+)/;\n    const matches = attributeValue.match(regex);\n    if (matches) {\n        const courseNumber = matches[0];\n        courseid = courseNumber.split('-')[1];\n        // window.console.log(\"lcprogessuiups-- cmid------\", courseid);\n        return (courseid);\n    }\n};\n\n/**\n * The way with more effort for h5p activity information.\n * Analyses the event inforamtion.\n * Gets the innerHTML from the given service function (get_H5P_ActivityInformation_InnerHTML).\n * Modfies the the DOM based on the neareast list element\n * and looks for the selector selectors.activityinfo.body within the list element.\n *\n * @param {*} course_id\n * @param {*} event\n */\nconst modify_Activityinformation = async (course_id, event) => {\n    if (event && event.detail) {\n        if (event.detail.completionType && event.detail.completionType == 'H5Pscored') {\n            if (event.detail.framedin) {\n                const eventtarget = event.detail.framedin;\n                // window.console.log('lcprogessuiups-- eventtarget', eventtarget);\n                var element = eventtarget.closest('li > div');\n                const cmid = getCmid(eventtarget.closest('li'));\n                try {\n                    const innerHTML = await get_InnerHTML(get_H5P_ActivityInformation_InnerHTML, course_id, { cmid: cmid });\n                    await modifyDOM(selectors.activityinfo.qselector, element)(innerHTML);\n                } catch (error) {\n                    onError(error);\n                }\n            } else {\n                // window.console.log(\"lcprogessuiups-- no DOM for ActivityInformation in event\");\n            }\n        } else {\n            // window.console.log(\"lcprogessuiups-- no H5Pscored completionType in event\");\n        }\n    }\n    return true;\n};\n\n\n/**\n * Gets cmid.\n * Gets the innerHTML from the given (service) function (servicefunc).\n * Replaces the DOM element based on the selector given.\n * @param {*} course_id\n * @param {*} servicefunc\n * @param {*} selector\n */\nconst modify_Activity = async (course_id, servicefunc, selector) => {\n    const activity = document.getElementsByClassName(selector)[0];\n    if (!activity) {\n        return true;\n    }\n    const cmid = getCmid(activity);\n    window.console.log(\"CMID: \" + cmid + \"servicefunc\" + servicefunc);\n    try {\n        const innerHTML = await get_InnerHTML(servicefunc, course_id, { cmid: cmid });\n        window.console.log(\"modify_Activity\" + innerHTML);\n        await replaceDOM(selector)(innerHTML);\n\n    } catch (error) {\n        onError(error);\n    }\n    return true;\n};\n\n\n\n/*\n* This is the real dynprogress that calls all available UI updates.\n*/\nexport const init = () => {\n    const prbar = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    const course_id = getCourseIdFromBody();\n    if (prbar && course_id) {\n        // Add listener that dispatch cmcompleted events.\n        // window.console.log('lcprogessuiups-- livecoprogressuiups----load listener');\n        listener();\n    } else {\n        // window.console.log('lcprogessuiups-- livecoprogressuiups----no listeners loaded due to missing prbar');\n    }\n\n    window.addEventListener('load', function () {\n        // Add an event listener to handle the cmcompleted - send from the local_livecoprogressuiups/listener.\n        document.addEventListener('cmcompleted', function (event) {\n            // window.console.log('lcprogessuiups-- cmcompleted----Custom event triggered:', event.detail.message);\n            // Implement wait 300 ms to give some time to the core events dealing with the completion.\n            setTimeout(function () {\n                // The theme_learnr_progressbar.\n                letthemagicbedone(course_id, get_theme_learnr_Progressbar_InnerHTML, selectors.progressbar.class);\n                // The H5P completion section. Needs some more arguments to do the magic.\n                modify_Activityinformation(course_id, event);\n                // The block_game.\n                letthemagicbedone(course_id, get_block_Game_InnerHTML, selectors.game.class);\n                // customcert activity\n                modify_Activity(course_id, get_customcert_Activity_InnerHTML, selectors.customcertactivity.class);\n            }, 300);\n        });\n    });\n};"],"names":["replaceDOM","selectorclass","element","document","async","innerHTML","elementToReplace","getElementsByClassName","newElement","createElement","parentNode","replaceChild","get_InnerHTML","getinnerhtmlfunc","course_id","options","response","cmid","window","console","log","error","onError","err","letthemagicbedone","servicefunc","selector","getCmid","liidelement","matches","getAttribute","match","split","modify_Activityinformation","event","detail","completionType","framedin","eventtarget","closest","get_H5P_ActivityInformation_InnerHTML","selectorq","querySelector","modifyDOM","selectors","activityinfo","qselector","prbar","bodyTag","getElementsByTagName","courseid","getAttributeNames","forEach","attribute","courseNumber","getCourseIdFromBody","addEventListener","setTimeout","get_theme_learnr_Progressbar_InnerHTML","progressbar","class","get_block_Game_InnerHTML","game","activity","modify_Activity","get_customcert_Activity_InnerHTML","customcertactivity"],"mappings":";;;;;;;;cAmESA,WAAWC,mBAAeC,+DAAUC,gBAClCC,eAAyBC,iBACtBC,iBAAmBJ,QAAQK,uBAAuBN,eAAe,MACnEK,iBAAkB,OAEZE,WAAaL,SAASM,cAAc,OAC1CD,WAAWH,UAAYA,UACDC,iBAAiBI,WACzBC,aAAaH,WAAYF,mCA+BpCM,cAAcC,iBAAkBC,eAAWC,+DAAU,WAExDC,YACAD,QAAQE,MACRD,eAAiBH,iBAAiBC,UAAWC,QAAQE,MACrDC,OAAOC,QAAQC,IAAIJ,WAEnBA,eAAiBH,iBAAiBC,WAElCE,UAAYA,SAASX,iBACdW,SAASX,8DAKtB,MAAOgB,oDACyCR,+DACrBQ,4BAAmBP,wBAAeC,QAAQE,gBASlEK,QAAQC,KACbL,OAAOC,QAAQC,IAAI,WAAYG,iLAUtBC,kBAAoBpB,MAAOU,UAAWW,YAAaC,sBAElDrB,gBAAkBO,cAAca,YAAaX,WACnDI,OAAOC,QAAQC,IAAIK,YAAc,IAAMpB,iBACjCL,WAAW0B,SAAX1B,CAAqBK,WAC7B,MAAOgB,OAELC,8EAD8EG,gCAAuBJ,6DAWvGM,QAAWC,oBAIPC,QAFiBD,YAAYE,aAAa,MAEjBC,MADjB,mBAEVF,QAAS,QACYA,QAAQ,GACLG,MAAM,KAAK,KAgBrCC,2BAA6B7B,MAAOU,UAAWoB,YAC7CA,OAASA,MAAMC,QACXD,MAAMC,OAAOC,gBAAiD,aAA/BF,MAAMC,OAAOC,gBACxCF,MAAMC,OAAOE,SAAU,OACjBC,YAAcJ,MAAMC,OAAOE,aAE7BnC,QAAUoC,YAAYC,QAAQ,kBAC5BtB,KAAOU,QAAQW,YAAYC,QAAQ,iBAE/BlC,gBAAkBO,cAAc4B,kDAAuC1B,UAAW,CAAEG,KAAMA,sBAzGjGwB,eAAWvC,+DAAUC,gBAC7BC,eAAyBC,WAEXH,QAAQwC,cAAcD,WAC5BpC,UAAYA,WAsGLsC,CAAUC,mBAAUC,aAAaC,UAAW5C,QAA5CyC,CAAqDtC,WAC7D,MAAOgB,OACLC,QAAQD,eASjB,iBAmCS,WACV0B,MAAQ5C,SAASI,uBAAuB,kCAAkC,GAC1EO,2BA1MAkC,QAAU7C,SAAS8C,qBAAqB,QAAQ,OAElDC,gBADmBF,QAAQG,oBAEhBC,SAAQC,kBAGbxB,QAFiBmB,QAAQlB,aAAauB,WAEbtB,MADjB,mBAEVF,QAAS,OACHyB,aAAezB,QAAQ,UAC7BqB,SAAWI,aAAatB,MAAM,KAAK,OAIvCkB,WAGO,EA0LOK,GACdR,OAASjC,gCAQbI,OAAOsC,iBAAiB,QAAQ,WAE5BrD,SAASqD,iBAAiB,eAAe,SAAUtB,OAG/CuB,YAAW,WAEPjC,kBAAkBV,UAAW4C,mDAAwCd,mBAAUe,YAAYC,OAE3F3B,2BAA2BnB,UAAWoB,OAEtCV,kBAAkBV,UAAW+C,qCAA0BjB,mBAAUkB,KAAKF,OA7C9DxD,OAAOU,UAAWW,YAAaC,kBAC7CqC,SAAW5D,SAASI,uBAAuBmB,UAAU,OACtDqC,gBACM,QAEL9C,KAAOU,QAAQoC,UACrB7C,OAAOC,QAAQC,IAAI,SAAWH,KAAO,cAAgBQ,uBAE3CpB,gBAAkBO,cAAca,YAAaX,UAAW,CAAEG,KAAMA,OACtEC,OAAOC,QAAQC,IAAI,kBAAoBf,iBACjCL,WAAW0B,SAAX1B,CAAqBK,WAE7B,MAAOgB,OACLC,QAAQD,SAkCA2C,CAAgBlD,UAAWmD,8CAAmCrB,mBAAUsB,mBAAmBN,SAC5F"}