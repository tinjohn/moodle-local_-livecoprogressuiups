{"version":3,"file":"dynprogress.min.js","sources":["../src/dynprogress.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Dynamic Progressbar and more\n *\n * @module     local_livecoprogressuiups/dynprogress\n * @copyright  2023 Tina John <tina.john@th-luebeck.de>\n * @copyright  Institut fuer interaktive Systeme der TH Lübeck\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { init as listener } from './listener';\n\nimport { get_theme_learnr_Progressbar_InnerHTML } from './local/dynprogress/repository';\nimport { get_block_Game_InnerHTML } from './local/dynprogress/repository';\nimport { get_H5P_ActivityInformation_InnerHTML } from './local/dynprogress/repository';\nimport { get_customcert_Activity_InnerHTML } from './local/dynprogress/repository';\nimport { get_format_mooin4_Progressbar_InnerHTML } from './local/dynprogress/repository';\n//import toggleManualCompletionState from 'core_course/manual_completion_toggle';\n\nimport selectors from 'local_livecoprogressuiups/local/dynprogress/selectors';\n\n\n/**\n * Gets the course id from body tag.\n *\n * @returns courseid or false.\n */\nfunction getCourseIdFromBody() {\n    const bodyTag = document.getElementsByTagName('body')[0];\n    const attributeNames = bodyTag.getAttributeNames();\n    var courseid;\n    attributeNames.forEach(attribute => {\n        const attributeValue = bodyTag.getAttribute(attribute);\n        const regex = /course-(\\d+)/;\n        const matches = attributeValue.match(regex);\n        if (matches) {\n            const courseNumber = matches[0];\n            courseid = courseNumber.split('-')[1];\n            return (courseid);\n        }\n    });\n    if (courseid) {\n        return (courseid);\n    } else {\n        return false;\n    }\n}\n\n/**\n * Replaces the whole DOM element looked for by the given selectorclass starting from DOMs 'element'.\n * It is not as smooth as just changing a parameter in DOM elements like the width of a progressbar,\n * but the DOM element is correct and overall up-to-date.\n *\n * @param {*} selectorclass\n * @param {*} element by default document\n */\nfunction replaceDOM(selectorclass, element = document) {\n    return async function onResolve(innerHTML) {\n        const elementToReplace = element.getElementsByClassName(selectorclass)[0];\n        if (elementToReplace) {\n            // window.console.log(\"---replaceDOM--\", selectorclass);\n            const newElement = document.createElement('div');\n            newElement.innerHTML = innerHTML;\n            const parentElement = elementToReplace.parentNode;\n            parentElement.replaceChild(newElement, elementToReplace);\n        }\n    };\n}\n\n/**\n* Modifies the whole DOM elements innerHTML looked for by the given selectorq\n* and the element to start from.\n*\n* @param {*} selectorq\n* @param {*} element\n*/\nfunction modifyDOM(selectorq, element = document) {\n    return async function onResolve(innerHTML) {\n        window.console.log(\"---modifyDOM--\", selectorq);\n        var selelement = element.querySelector(selectorq);\n        if(selelement) {\n            selelement.innerHTML = innerHTML;\n        }\n    };\n}\n\n\n/**\n * Takes a function that returns a string, that must contain an innerHTML attribute,\n * that contains a string of an innerHTML.\n * The function is async called due to the fact that the function might be a webservice.\n *\n * @param {*} getinnerhtmlfunc\n * @param {*} course_id\n * @param {*} options\n * @returns innerHTML string\n */\nasync function get_InnerHTML(getinnerhtmlfunc, course_id, options = {}) {\n    try {\n        let response;\n        if (options.cmid) {\n            response = await getinnerhtmlfunc(course_id, options.cmid);\n            window.console.log(response);\n        } else {\n            response = await getinnerhtmlfunc(course_id);\n        }\n        if (response && response.innerHTML) {\n            return response.innerHTML;\n        } else {\n            var errMsg = `in Webservice - no response.innerHTML found.`;\n            throw errMsg;\n        }\n    } catch (error) {\n        var errMsg = `${error} in Webservice: - servicefunc: ${getinnerhtmlfunc}, \n        error - get_InnerHTML: , coursid: ${course_id} , ${options.cmid}`;\n        throw errMsg;\n    }\n\n}\n\n/**\n * Puts an error message to console.\n * @param {*} err\n */\nfunction onError(err) {\n    window.console.log(\"--ERROR \", err);\n}\n\n/**\n * Gets the innerHTML from the given (service) function (servicefunc).\n * Replaces the DOM element based on the selector given.\n * @param {*} course_id\n * @param {*} servicefunc\n * @param {*} selector\n */\nexport const letthemagicbedone = async (course_id, servicefunc, selector) => {\n    const domthere = document.getElementsByClassName(selector)[0];\n    if (!domthere) {\n       // window.console.log(\"modify by magic - DOM not found\");\n        return true;\n    }\n    try {\n        const innerHTML = await get_InnerHTML(servicefunc, course_id);\n        // window.console.log(servicefunc + \" \" + innerHTML);\n        // window.console.log(servicefunc);\n        await replaceDOM(selector)(innerHTML);\n    } catch (error) {\n        const errMsg = `Something went wrong rewriting a DOM Element - servicefunc: ${servicefunc}, error: ${error}`;\n        onError(errMsg);\n    }\n};\n\n/**\n * Function extracts cmid from the given DOM elements that holds the information.\n *\n * @param {*} liidelement\n * @returns\n */\nconst getCmid = (liidelement) => {\n    var courseid;\n    const attributeValue = liidelement.getAttribute('id');\n    const regex = /module-(\\d+)/;\n    const matches = attributeValue.match(regex);\n    if (matches) {\n        const courseNumber = matches[0];\n        courseid = courseNumber.split('-')[1];\n        // window.console.log(\"lcprogessuiups-- cmid------\", courseid);\n        return (courseid);\n    }\n};\n\n/**\n * The way with more effort for h5p activity information.\n * Analyses the event inforamtion.\n * Gets the innerHTML from the given service function (get_H5P_ActivityInformation_InnerHTML).\n * Modfies the the DOM based on the neareast list element\n * and looks for the selector selectors.activityinfo.body within the list element.\n *\n * @param {*} course_id\n * @param {*} event\n */\nconst modify_Activityinformation = async (course_id, event) => {\n    if (event && event.detail) {\n        if (event.detail.completionType && event.detail.completionType == 'H5Pscored') {\n            if (event.detail.framedin) {\n                const eventtarget = event.detail.framedin;\n                // window.console.log('lcprogessuiups-- eventtarget', eventtarget);\n                var element = eventtarget.closest('li > div');\n                const cmid = getCmid(eventtarget.closest('li'));\n                try {\n                    const innerHTML = await get_InnerHTML(get_H5P_ActivityInformation_InnerHTML, course_id, { cmid: cmid });\n                    await modifyDOM(selectors.activityinfo.qselector, element)(innerHTML);\n                } catch (error) {\n                    onError(error);\n                }\n            } else {\n                //window.console.log(\"lcprogessuiups-- no DOM for ActivityInformation in event\");\n            }\n        } else {\n            //window.console.log(\"lcprogessuiups-- no H5Pscored completionType in event\");\n        }\n    }\n    return true;\n};\n\n/**\n * The way with more effort for h5p activity information.\n * Analyses the event inforamtion.\n * Gets the innerHTML from the given service function (get_H5P_ActivityInformation_InnerHTML).\n * Modfies the the DOM based on the neareast list element\n * and looks for the selector selectors.activityinfo.body within the list element.\n *\n * @param {*} course_id\n * @param {*} event\n */\nconst modify_Mooin4Progressbar = async (course_id, event) => {\n    if (event && event.detail) {\n        if (event.detail.completionType && event.detail.completionType == 'H5Pscored') {\n            if (event.detail.framedin) {\n                const eventtarget = event.detail.framedin;\n                // window.console.log('lcprogessuiups-- eventtarget', eventtarget);\n                //var element = eventtarget.closest('li > div');\n                const cmid = getCmid(eventtarget.closest('li'));\n                try {\n                    // get_InnerHTML unglücklicher Name - hole das Ergebnis des Webservices passte besser\n                    const innerHTML = await get_InnerHTML(get_format_mooin4_Progressbar_InnerHTML, course_id, { cmid: cmid });\n                    // get_format_mooin4_Progressbar_InnerHTML holt jetzt mal nur die percentage\n                    window.console.log('lcprogessuiups-- innerHTML - the progress', innerHTML.progress);\n                    const sectionProgress = innerHTML.progress; // Access by key\n                    const sectionId = innerHTML.sectionId; // Access by key\n                    const warnings = warnings; // Access warnings array\n\n                    // Fixed concatenation of the `barselector` string für altes Mooin\n                    // const barselector = 'mooin4ection' + sectionId; // Use string concatenation correctly\n                    // const bartextselector = 'mooin4ection-text-' + sectionId; // Use string concatenation correctly\n\n                    // Fixed method to get element by id\n                    //const elementTomod = document.querySelectorAll('[id^=\"mooin4ection\"]')[0];\n                    // stimmt fuer neues Mooin\n                    const elementTomodbar =  document.getElementsByClassName('progressbar-inner')[0]; // Fixed `getElementById`\n                    //const elementTomodtext = document.getElementById(bartextselector); // Fixed `getElementById`\n                    if (elementTomodbar) {\n                        elementTomodbar.style.width = sectionProgress + '%';\n                        //elementTomodtext.innerHTML = sectionProgress + '% ';\n                    } else {\n                        window.console.log(`Element with id progressbar-inner not found.`);\n                    }\n                    const elementTomodtext =  document.querySelector('span[data-for=\"section-progress\"]');\n                    //const elementTomodtext = document.getElementById(bartextselector); // Fixed `getElementById`\n                    if (elementTomodtext) {\n                        //elementTomodbar.style.width = sectionProgress + '%';\n                        elementTomodtext.innerHTML = sectionProgress;\n                    } else {\n                        window.console.log(`Element with queryselector section-progress not found.`);\n                    }\n\n                    //await modifyDOM(selectors.mooin4progressbar.class, element)(innerHTML);\n\n\n                    //await replaceDOM(selectors.mooin4progressbar.class)(innerHTML);\n\n                } catch (error) {\n                    onError(error);\n                }\n            } else {\n                //window.console.log(\"lcprogessuiups-- no DOM for ActivityInformation in event\");\n            }\n        } else {\n            //window.console.log(\"lcprogessuiups-- no H5Pscored completionType in event\");\n        }\n    }\n    return true;\n};\n\n\n/**\n * Gets cmid.\n * Gets the innerHTML from the given (service) function (servicefunc).\n * Replaces the DOM element based on the selector given.\n * @param {*} course_id\n * @param {*} servicefunc\n * @param {*} selector\n */\nconst modify_Activity = async (course_id, servicefunc, selector) => {\n    const domthere = document.getElementsByClassName(selector)[0];\n    if (!domthere) {\n        //window.console.log(\"modify_Activity - DOM not found\");\n        return true;\n    }\n\n    const cmid = getCmid(domthere);\n    // window.console.log(\"CMID: \" + cmid + \"servicefunc\" + servicefunc);\n    try {\n        const innerHTML = await get_InnerHTML(servicefunc, course_id, { cmid: cmid });\n        // window.console.log(\"modify_Activity\" + innerHTML);\n        // window.console.log(\"modify_Activity\");\n        await replaceDOM(selector)(innerHTML);\n\n    } catch (error) {\n        onError(error);\n    }\n    return true;\n};\n\n\n\n\n\n\n\n\n/**\n * Gets cmid.\n * Gets the innerHTML from the given (service) function (servicefunc).\n * Replaces the DOM element based on the selector given.\n * @param {*} course_id\n * @param {*} servicefunc\n * @param {*} selectorq\n */\nconst prepareNtrigger_pseudolabel = async (course_id, servicefunc, selectorq) => {\n    const domthere = window.document.querySelector(selectorq);\n    if (!domthere) {\n        //window.console.log(\"prepareNtrigger_pseudolabel - DOM not found\" + selectorq);\n        return true;\n    }\n\n    const cmid = getCmid(domthere.closest('li'));\n    // window.console.log(\"CMID: \" + cmid + \"servicefunc\" + servicefunc);\n    try {\n        const innerHTML = await get_InnerHTML(servicefunc, course_id, { cmid: cmid });\n        // window.console.log(\"modify_Activity\" + innerHTML);\n        // window.console.log(\"modify_Activity\");\n        await modifyDOM(selectorq)(innerHTML);\n\n    } catch (error) {\n        onError(error);\n    }\n    trigger_pseudolabel_mancompl(selectors.pseudolabel.qselector);\n    return true;\n};\n\n\n\nconst trigger_pseudolabel_mancompl = (selectorq) => {\n    // pseudolabel activity\n    const domthere = window.document.querySelector(selectorq);\n    if (!domthere) {\n        window.console.log(\"pseudolabel_activity - DOM not found\" + selectorq);\n        return true;\n    } else {\n        window.console.log(\"pseudolabel_activity - DOM found\");\n    }\n    const mancomplbutt = domthere.querySelector(selectors.pseudolabelsmancomplbutt.qselector);\n    if (!mancomplbutt) {\n        window.console.log(\"pseudolabel_activity - DOM not found\" + selectorq);\n        return true;\n    } else {\n        window.console.log(\"pseudolabel_activity - DOM found\" + selectors.pseudolabelsmancomplbutt.qselector);\n    }\n    //const cmid = getCmid(domthere.closest('li'));\n    // window.console.log(\"CMID: \" + cmid + \"servicefunc\" + servicefunc);\n    mancomplbutt.click();\n    //toggleManualCompletionState(mancomplbutt);\n};\n\n\n/*\n* This is the real dynprogress that calls all available UI updates.\n*/\nexport const init = () => {\n\n    // theme learn_r progressbar\n    const prbar1 = document.getElementsByClassName('progress-bar progress-bar-info')[0];\n    // format mooin4\n    const prbar2 = document.getElementsByClassName('progressbar')[0];\n    const course_id = getCourseIdFromBody();\n    if ((prbar1 || prbar2) && course_id) {\n        // Add listener that dispatch cmcompleted events when a progress bar exists.\n        listener();\n        window.console.log('local_livecoprogressuiups----load listener');\n    } else {\n        // window.console.log('lcprogessuiups-- livecoprogressuiups----no listeners loaded due to missing prbar');\n    }\n\n\n    window.addEventListener('load', function () {\n        // Add an event listener to handle the cmcompleted - send from the local_livecoprogressuiups/listener.\n        document.addEventListener('cmcompleted', function (event) {\n            // window.console.log('lcprogessuiups-- cmcompleted----Custom event triggered:', event.detail.message);\n            // Implement wait 300 ms to give some time to the core events dealing with the completion.\n            setTimeout(function () {\n\n                // The theme_learnr_progressbar.\n                letthemagicbedone(course_id, get_theme_learnr_Progressbar_InnerHTML, selectors.progressbar.class);\n                // The H5P completion section. Needs some more arguments to do the magic.\n                modify_Activityinformation(course_id, event);\n                // The block_game.\n                letthemagicbedone(course_id, get_block_Game_InnerHTML, selectors.game.class);\n                // For customcert activity.\n                modify_Activity(course_id, get_customcert_Activity_InnerHTML, selectors.customcertactivity.class);\n                // An available pseudolabel.\n                trigger_pseudolabel_mancompl(selectors.pseudolabel.qselector);\n                // For not available pseudolabel.\n                prepareNtrigger_pseudolabel(course_id, get_customcert_Activity_InnerHTML, selectors.pseudolabel.qselector);\n\n                // The theme_learnr_progressbar.\n                modify_Mooin4Progressbar(course_id, event) ;\n            }, 300);\n        });\n    });\n};"],"names":["replaceDOM","selectorclass","element","document","async","innerHTML","elementToReplace","getElementsByClassName","newElement","createElement","parentNode","replaceChild","modifyDOM","selectorq","window","console","log","selelement","querySelector","get_InnerHTML","getinnerhtmlfunc","course_id","options","response","cmid","error","onError","err","letthemagicbedone","servicefunc","selector","getCmid","liidelement","matches","getAttribute","match","split","trigger_pseudolabel_mancompl","domthere","mancomplbutt","selectors","pseudolabelsmancomplbutt","qselector","click","prbar1","prbar2","bodyTag","getElementsByTagName","courseid","getAttributeNames","forEach","attribute","courseNumber","getCourseIdFromBody","addEventListener","event","setTimeout","get_theme_learnr_Progressbar_InnerHTML","progressbar","class","detail","completionType","framedin","eventtarget","closest","get_H5P_ActivityInformation_InnerHTML","activityinfo","modify_Activityinformation","get_block_Game_InnerHTML","game","modify_Activity","get_customcert_Activity_InnerHTML","customcertactivity","pseudolabel","prepareNtrigger_pseudolabel","get_format_mooin4_Progressbar_InnerHTML","progress","sectionProgress","elementTomodbar","sectionId","style","width","elementTomodtext","modify_Mooin4Progressbar"],"mappings":"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"}