{"version":3,"file":"cm_h5p_scored_listener.min.js","sources":["../../../src/local/listener/cm_h5p_scored_listener.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Dynamic Progressbar and more - JS code cm_h5p_scored_listener\n *\n * @module     local_livecoprogressuiups/cm_h5p_scored_listener\n * @copyright  2023 Tina John <tina.john@th-luebeck.de>\n * @copyright  Institut fuer interaktive Systeme der TH LÃ¼beck\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n//import {get_H5P_ActivityInformation_InnerHTML} from './repository';\n\n\nlet registered = false;\n\n/**\n * Function to intialise and register event listeners for this module.\n */\nexport const init = () => {\n    if (registered) {\n        return;\n    }\n    registered = true;\n\n\n  /**\n  * USED for handleXAPIEvent\n  * Add progress whenever context.id module was not completed on inital load.\n  * @param {event} event from Dispatcher.\n  */\n  const handleXAPIEvent = function (event) {\n    if(event && event.data && event.data.statement && event.data.statement.result) {\n          if(event.data.statement.result.score && event.data.statement.result.score.scaled) {\n              window.console.log('lcprogessuiups-- --externalDispatcher-handleXAPIEvent-',event);\n              const theiframe = this.frameElement;\n              // Create and trigger the cmcompleted event listened by dynprogress.\n              var cmcompletedEvent = new CustomEvent('cmcompleted',\n              { detail: {\n                completionType: 'H5Pscored',\n                framedin: theiframe,\n                message: 'a course module completed or scored'\n               }\n              });\n              document.dispatchEvent(cmcompletedEvent);\n          }\n      }\n  };\n\n\n  // Listen to H5P iframe message to get H5P completion statements.\n  window.addEventListener('message', function(e) {\n    window.console.log('lcprogessuiups-- ---got mail from iframe---', e.data);\n  /*  if(e.data.method == 'addProgress') {\n        const [, contextid] = e.data.contextid.split(/\\/(?=[^\\/]+$)/);\n        addProgress(contextid);\n    }\n  */\n    // iframe is loaded and all namesspaces are load\n    if(e.data && e.data.context) {\n      if(e.data.context == \"h5p\" && e.data.action == \"hello\") {\n        addsh5pdispatcherlistener();\n      }\n    }\n    // H5PembedIncore_send_core_xapi_statement_post is added to embed.js in core\n    // no better way found until now\n    if(e.data.context == 'h5p' && e.data.action == \"H5PembedIncore_send_core_xapi_statement_post\") {\n        window.console.log(\"lcprogessuiups-- H5PembedIncore_send_core_xapi_statement_post --\");\n        //dynprbar_action();\n    }\n  });\n\n\n   /**\n   * addsh5pdispatcherlistener\n   * Add progress whenever context.id module was not completed on inital load.\n   */\n  function addsh5pdispatcherlistener () {\n  //for single H5P in a course if the document.onreadystatechange version is preferred\n  // if(window.document.h5player\n  //   && window.document.h5player.H5P && window.document.h5player.H5P.externalDispatcher) {\n  //   window.console.log('lcprogessuiups-- --externalDispatcher-single-gefunden-1-');\n  //   // delete all listeners from H5P.externalDispatcher to get rid of double executions\n  //   // without function due to error with given function as argument\n  //   window.document.h5player.H5P.externalDispatcher.off('xAPI');\n  //   window.document.h5player.H5P.externalDispatcher.on('xAPI', handleXAPIEvent);\n  // }\n\n\n  // FOLLOWING  WORKING BUT TO early in the event lists - setTimeout is a workaround\n    // document.onreadystatechange: iframe is loaded and all namesspaces are loaded\n    // DOES NOT work for single H5P in a course, thus allow multiple listeners to be removed again\n\n    // document.onreadystatechange = () => {\n    //   if (document.readyState === \"complete\") {\n        // The single H5P.\n        if(window.document.h5player\n              && window.document.h5player.H5P && window.document.h5player.H5P.externalDispatcher) {\n              window.console.log('lcprogessuiups-- livecoprogressuiups--externalDispatcher-single-gefunden-aka_docready-');\n\n              var h5pextlDispatcher = window.document.h5player.H5P.externalDispatcher;\n                // delete all listeners from H5P.externalDispatcher to get rid of double executions\n                // without function due to error with given function as argument\n                window.document.h5player.H5P.externalDispatcher.off('xAPI');\n                window.document.h5player.H5P.externalDispatcher.on('xAPI', function (event) {\n                if(event && event.data && event.data.statement && event.data.statement.result) {\n                    if(event.data.statement.result.score && event.data.statement.result.score.scaled) {\n                        window.console.log('lcprogessuiups-- livecoprogressuiups--externalDispatcher-single--',event);\n                        // Create and trigger the custom event cmcompleted.\n                        var cmcompletedEvent = new CustomEvent('cmcompleted',\n                        { detail: { message: 'a course module completed or scored' } });\n                          document.dispatchEvent(cmcompletedEvent);\n                    }\n                }\n            });\n\n        } else {\n          // Access the h5pplayer within each window.\n          for (var i = 0; i < window.length; i++) {\n              var currentWindow = window[i];\n              h5pextlDispatcher = currentWindow.H5P.externalDispatcher;\n              if (h5pextlDispatcher) {\n                  // Perform actions on the h5pplayer element.\n                  window.console.log(\"lcprogessuiups-----found h5p in window ---\", h5pextlDispatcher);\n                  // Delete all listeners from H5P.externalDispatcher to get rid of double executions\n                  // without function due to error with given function as argument\n                  // tried a lot to make it work with function - no success.\n                  currentWindow.H5P.externalDispatcher.off('xAPI');\n                  currentWindow.H5P.externalDispatcher.on('xAPI',handleXAPIEvent.bind(currentWindow));\n                  // works fine but codes to messy\n                  // currentWindow.H5P.externalDispatcher.on('xAPI',\n                  // function (event) {\n                  //   if(event && event.data && event.data.statement && event.data.statement.result) {\n                  //       if(event.data.statement.result.score && event.data.statement.result.score.scaled) {\n                  //           window.console.log('lcprogessuiups--externalDispatcher--handle-',event.data.statement.result);\n                  //           var cmcompletedEvent = new CustomEvent('cmcompleted',\n                  //            { detail: { message: 'a course module completed or scored' } });\n                  //           // // Trigger the custom event\n                  //            document.dispatchEvent(cmcompletedEvent);\n                  //            hideCompletionInfo(event.target);\n                  //       }\n                  //   }\n                  // }\n                  //);\n              } else {\n                  window.console.log('lcprogessuiups-- livecoprogressuiups--h5playerElement not found');\n              }\n          }\n        }\n  //          }\n  //        };\n\n  }\n\n};\n"],"names":["registered","handleXAPIEvent","event","data","statement","result","score","scaled","window","console","log","theiframe","this","frameElement","cmcompletedEvent","CustomEvent","detail","completionType","framedin","message","document","dispatchEvent","addEventListener","e","context","action","h5player","H5P","externalDispatcher","h5pextlDispatcher","off","on","i","length","currentWindow","bind","addsh5pdispatcherlistener"],"mappings":";;;;;;;;;IA2BIA,YAAa,gBAKG,QACZA,kBAGJA,YAAa,QAQTC,gBAAkB,SAAUC,UAC7BA,OAASA,MAAMC,MAAQD,MAAMC,KAAKC,WAAaF,MAAMC,KAAKC,UAAUC,QAC9DH,MAAMC,KAAKC,UAAUC,OAAOC,OAASJ,MAAMC,KAAKC,UAAUC,OAAOC,MAAMC,OAAQ,CAC9EC,OAAOC,QAAQC,IAAI,yDAAyDR,aACtES,UAAYC,KAAKC,iBAEnBC,iBAAmB,IAAIC,YAAY,cACvC,CAAEC,OAAQ,CACRC,eAAgB,YAChBC,SAAUP,UACVQ,QAAS,yCAGXC,SAASC,cAAcP,oBAOnCN,OAAOc,iBAAiB,WAAW,SAASC,GAC1Cf,OAAOC,QAAQC,IAAI,8CAA+Ca,EAAEpB,MAOjEoB,EAAEpB,MAAQoB,EAAEpB,KAAKqB,SACG,OAAlBD,EAAEpB,KAAKqB,SAAqC,SAAjBD,EAAEpB,KAAKsB,sBAoChCjB,OAAOY,SAASM,UACVlB,OAAOY,SAASM,SAASC,KAAOnB,OAAOY,SAASM,SAASC,IAAIC,mBAAoB,CACpFpB,OAAOC,QAAQC,IAAI,8FAEfmB,kBAAoBrB,OAAOY,SAASM,SAASC,IAAIC,mBAGnDpB,OAAOY,SAASM,SAASC,IAAIC,mBAAmBE,IAAI,QACpDtB,OAAOY,SAASM,SAASC,IAAIC,mBAAmBG,GAAG,QAAQ,SAAU7B,UAClEA,OAASA,MAAMC,MAAQD,MAAMC,KAAKC,WAAaF,MAAMC,KAAKC,UAAUC,QAChEH,MAAMC,KAAKC,UAAUC,OAAOC,OAASJ,MAAMC,KAAKC,UAAUC,OAAOC,MAAMC,OAAQ,CAC9EC,OAAOC,QAAQC,IAAI,oEAAoER,WAEnFY,iBAAmB,IAAIC,YAAY,cACvC,CAAEC,OAAQ,CAAEG,QAAS,yCACnBC,SAASC,cAAcP,+BAOlC,IAAIkB,EAAI,EAAGA,EAAIxB,OAAOyB,OAAQD,IAAK,KAChCE,cAAgB1B,OAAOwB,IAC3BH,kBAAoBK,cAAcP,IAAIC,qBAGlCpB,OAAOC,QAAQC,IAAI,6CAA8CmB,mBAIjEK,cAAcP,IAAIC,mBAAmBE,IAAI,QACzCI,cAAcP,IAAIC,mBAAmBG,GAAG,OAAO9B,gBAAgBkC,KAAKD,iBAiBpE1B,OAAOC,QAAQC,IAAI,oEApF7B0B,GAKiB,OAAlBb,EAAEpB,KAAKqB,SAAqC,gDAAjBD,EAAEpB,KAAKsB,QACjCjB,OAAOC,QAAQC,IAAI"}